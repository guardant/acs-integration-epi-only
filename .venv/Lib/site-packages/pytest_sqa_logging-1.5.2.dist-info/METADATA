Metadata-Version: 2.1
Name: pytest-sqa-logging
Version: 1.5.2
Summary: A pytest plugin to create sqa logger fixture for testing.
Home-page: https://github.com/guardant/pytest_sqa_logging
Author: Phebe Polk
Author-email: ppolk@guardanthealth.com
Requires-Python: >=3.6.2,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Framework :: Pytest
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Software Development :: Testing
Requires-Dist: pytest (>=6.2.0,<7.0.0)
Project-URL: Repository, https://github.com/guardant/pytest_sqa_logging
Description-Content-Type: text/x-rst

pytest-sqa-logging: SQA Logging (Python)
========================================================

**pytest-sqa-logging** is a Pytest Plugin for creating Software Quality (SQA) logs for Validation and Verification purposes.

The python package pytest-sqa-logging gets installed into a virtual environment along with pytest.  As a pytest plugin,
it does nothing unless pytest is run. When pytest is run, it automatically creates log files to document each test case.
A pytest fixture called simply "logger" is provided to each testcase, and information can be passed to the logger using
the standard "logger.info()" structure.  See the
`python standard library documentation about logging <https://docs.python.org/3/library/logging.html>`_ for more information.



Features
--------

- Looking for something? Check out our `docs <https://bookish-broccoli-56d6477f.pages.github.io/>`_!

.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white
   :target: https://github.com/pre-commit/pre-commit
   :alt: pre-commit

Examples
--------

Given pytest test cases are written in a test directory in this format.

.. code-block:: python

        from random import randint

        def test_Passes_1():
            assert True

        def test_Passes_2(logger):
            logger.info(f"Random number: {randint(0,100)}")
            assert True



When pytest is run from the command line like this.

.. code-block:: shell

    >>> pytest .
    ============================= test session starts ==============================
    platform darwin -- Python 3.6.5, pytest-5.4.3, py-1.10.0, pluggy-0.13.1 -- /Users/ppolk/Projects/Work/pytest-sqa-logging/.venv/bin/python
    cachedir: .pytest_cache
    rootdir: /private/var/folders/d4/ry1gfxvx6l78_jp31gz9fjk40000gq/T/pytest-of-ppolk/pytest-151/test_passes0, inifile: tox.ini
    plugins: cov-2.12.1, sqa-logging-1.0.0
    collecting ... collected 2 items
    test_passes.py::test_Passes_1 PASSED                                     [ 50%]
    test_passes.py::test_Passes_2 PASSED                                     [100%]
    ============================== 2 passed in 0.14s ===============================

Log files are created in this format.

.. code-block:: shell

    [TestCaseLogs] cat test_passes_test_Passes_1.log                                                                                                                                                                                                     11:38:59
    2021-10-05 11:38:16,719 - test_Passes_1 - INFO - Create Log test_passes_test_Passes_1.log
    2021-10-05 11:38:16,722 - test_Passes_1 - INFO - test_passes.py::test_Passes_1 SETUP PASSED
    2021-10-05 11:38:16,725 - test_Passes_1 - INFO - test_passes.py::test_Passes_1 CALL PASSED
    2021-10-05 11:38:16,727 - test_Passes_1 - INFO - Closing Log test_passes_test_Passes_1.log
    [TestCaseLogs] cat test_passes_test_Passes_2.log                                                                                                                                                                                                     11:39:06
    2021-10-05 11:38:16,737 - test_Passes_2 - INFO - Create Log test_passes_test_Passes_2.log
    2021-10-05 11:38:16,739 - test_Passes_2 - INFO - test_passes.py::test_Passes_2 SETUP PASSED
    2021-10-05 11:38:16,741 - test_Passes_2 - INFO - Random number: 73
    2021-10-05 11:38:16,743 - test_Passes_2 - INFO - test_passes.py::test_Passes_2 CALL PASSED
    2021-10-05 11:38:16,745 - test_Passes_2 - INFO - Closing Log test_passes_test_Passes_2.log




Install
-------

.. code-block:: shell

    pip install pytest-sqa-logging --index-url=https://ARTIFACTORY_USERNAME:ARTIFACTORY_PASSWORD@artifactory01.ghdna.io/artifactory/api/pypi/pypi/simple


Contributing
------------

See something you want/need added? `Create an issue! <https://github.com/guardant/pytest-sqa-logging/issues/new>`_

Dev setup
^^^^^^^^^

Requirements:

- Python 3.6 or higher
- `Poetry <https://python-poetry.org/>`_

Once you have those two, install project dependencies with:

.. code-block:: shell

    poetry install

Make a branch. Preferably name it something related to the feature you want to add.

.. code-block:: shell

    git checkout -b "DEV_NAME/FEATURE_NAME"

Run the tests, check the coverage levels. > 80% is ok.

.. code-block:: shell

    make test

Run interrogate, check the docstring coverage.  > 80% is ok.

.. code-block:: shell

    make doctests

Make the docs.

.. code-block:: shell

    make docs

Open your pull request and check to see if you need to change the version numbers.

