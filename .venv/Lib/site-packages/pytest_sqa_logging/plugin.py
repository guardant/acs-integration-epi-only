# -*- coding: utf-8 -*-
"""
SQA Logging Pytest Plugin
"""
import logging
import random
import re
import string
from datetime import datetime
from pathlib import Path

import pytest


# os.environ["PYTEST_ADDOPTS"]="-rsxX -l --tb=short --strict -v"


class Test_case_name_parser:
    """Parse the name of the test case"""

    def __init__(self, request):
        """
        nodeid:'tests/emerald/test_cases/test_10_non_breast_cancer_type.py::Test_SNV::test_results_are_empty_and_sample_status_fail[Lung Cancer]'
        """
        self.nodeid = request.node.nodeid

    @property
    def scenario_name(
        self,
    ):
        """Parse out the scenario from the request node.

        In example:     test_results_are_empty_and_sample_status_fail[Lung Cancer]
        the scenario is Lung Cancer.
        """
        return self.nodeid.split("::")[-1]

    @property
    def class_name(self):
        """
        Example:
            nodeid: 'tests/emerald/test_cases/test_10_non_breast_cancer_type.py::Test_SNV::test_results_are_empty_and_sample_status_fail[Lung Cancer]'
            class_name:     Test_SNV
        """
        delimeter_count = self.nodeid.count("::")
        class_name_exists = delimeter_count == 2
        if class_name_exists:

            return self.nodeid.split("::")[-2] + "_"
        else:
            return ""

    @property
    def module_path(self):  # tests/emerald/test_cases/test_10_non_breast_cancer_type.py
        """Return module path"""
        return Path(self.nodeid.split("::")[0])

    @property
    def file_name(self):
        """Parse out the file name from the request node."""
        return Path(self.module_path).stem

    @property
    def project_name(self):  # emerald
        """This method is unstable."""
        DeprecationWarning("This method is unstable.")
        if len(self.module_path.parents) >= 4:
            return self.module_path.parents[1]

    def get_test_case_name(self):
        """Use test case references to build the log test_case_name
        test_case_name is file_name + _ + function_name + scenario eg. test_results_are_empty_and_sample_status_fail[Lung Cancer]
        """
        scenario_name = self.scenario_name
        scenario_name = re.sub("[^0-9a-zA-Z.]+", "_", scenario_name).rstrip(
            "_"
        )  # remove non-alphanumeric
        return self.file_name + "_" + self.class_name + scenario_name

    def get_log_name(self):
        """Build the log name from the test case name."""
        test_case_name = self.get_test_case_name()
        return test_case_name + ".log"


def get_timestamp():
    """Return formatted timestamp with an random string suitable for use in a dir path"""
    # Borrowed from bi-testing-framework jaybar_local.py
    N = 25
    datestr = datetime.now().strftime("%y%m%d_%H%M%S")
    randomstr = "".join(
        random.SystemRandom().choice(string.ascii_uppercase + string.digits)
        for _ in range(N)
    )
    return datestr + "_" + randomstr


def pytest_addoption(parser):
    """Pytest plugin function add option.

    Args:
      parser: Parses cli options for pytest.

    Returns: None

    """
    parser.addoption(
        "--logging-level",
        dest="logging_level",
        help="Sets the level for logging. https://docs.python.org/3/library/logging.html#levels",
        default="INFO",
    )
    parser.addoption(
        "--logging-dir",
        dest="logging_dir",
        help="Sets the the directory where test case logs are saved",
        default="logs/TestCaseLogs",
    )
    parser.addoption(
        "--use-logging-subdir",
        dest="use_logging_subdir",
        action="store_true",
        help="if True, create a uniquely named subdirectory in the main logging directory",
        default=False,
    )


def pytest_report_teststatus(report):
    """Pytest plugin function report teststatus.

    Args:
      report: pytest report object

    Returns: None

    """
    logger = logging.getLogger(report.head_line)
    logger.info(f"{report.nodeid} {report.when.upper()} {report.outcome.upper()}")


@pytest.fixture(scope="session", autouse=True)
def logging_level(request):
    """Pytest fixture for setting the level of logging.

    Args:
      request:  pytest runner testcase request

    Returns: str Logging level

    """
    return request.config.option.logging_level


@pytest.fixture(scope="session", autouse=True)
def logging_dir(request, use_logging_subdir):
    """Pytest fixture for setting the logging directory.

    Args:
      request:  pytest runner testcase request
      use_logging_subdir: bool if True, then use a unique subdirectory based on timestamp

    Returns: str Logging directory

    """
    if not use_logging_subdir:
        return request.config.option.logging_dir
    else:
        return f"{request.config.option.logging_dir}/{get_timestamp()}"


@pytest.fixture(scope="session", autouse=True)
def use_logging_subdir(request):
    """Pytest fixture for deciding if logging subdir should be used.

    Args:
      request:  pytest runner testcase request

    Returns: bool representing if subdir should be used

    """
    return request.config.option.use_logging_subdir


@pytest.fixture(scope="function", autouse=True)
def test_case_name(request):
    """Pytest fixture for the unique fully parametrized name of a pytest test case.

    Args:
      request: pytest runner testcase request

    Returns: str test case name

    """
    test_case_mapping = Test_case_name_parser(request)
    test_case_name = test_case_mapping.get_test_case_name()
    return test_case_name


@pytest.fixture(scope="function", autouse=True)
def logger(request, logging_level, logging_dir):
    """Pytest fixture for creating log files for each test case.

    Args:
      request: pytest runner testcase request
      logging_level: logging level eg. logging.INFO

    Returns: Logger instance

    """
    # meta data
    test_case_mapping = Test_case_name_parser(request)

    # create loggers
    logger_for_framework = logging.getLogger()
    logger_for_framework.setLevel(request.config.option.logging_level)
    logger_for_testcases = logging.getLogger(request.function.__name__)
    logger_for_testcases.setLevel(logging_level)

    # Find TestCaseLogs location
    # ToDo: Consider other options than current director for Path base
    logs_folder_file_path = next(Path(".").parent.rglob(f"{logging_dir}"), None)
    assert (
        logs_folder_file_path is not None
    ), f"No LOG_DIR found. Make sure {logging_dir} already exists."

    # Create File handler
    file_name = test_case_mapping.get_log_name()
    handler = logging.FileHandler(logs_folder_file_path / file_name, "w+")
    handler.setLevel(logging_level)

    # create a logging format
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    handler.setFormatter(formatter)

    # add the file handler to the logger
    logger_for_framework.addHandler(handler)
    logger_for_testcases.info(f"Create Log {file_name}")
    yield logger_for_testcases
    logger_for_testcases.info(f"Closing Log {file_name}")
    handler.close()
    logger_for_framework.removeHandler(handler)
